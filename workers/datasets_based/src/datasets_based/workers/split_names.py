# SPDX-License-Identifier: Apache-2.0
# Copyright 2022 The HuggingFace Authors.

import logging
from http import HTTPStatus
from typing import Any, List, Literal, Mapping, Optional, TypedDict

from libcommon.dataset import DatasetNotFoundError
from libcommon.simple_cache import DoesNotExist, SplitFullName, get_response

from datasets_based.worker import WorkerError
from datasets_based.workers._datasets_based_worker import DatasetsBasedWorker

SplitNamesWorkerErrorCode = Literal[
    "PreviousStepStatusError",
    "PreviousStepFormatError",
]


class SplitNamesWorkerError(WorkerError):
    """Base class for worker exceptions."""

    def __init__(
        self,
        message: str,
        status_code: HTTPStatus,
        code: SplitNamesWorkerErrorCode,
        cause: Optional[BaseException] = None,
        disclose_cause: bool = False,
    ):
        super().__init__(
            message=message, status_code=status_code, code=code, cause=cause, disclose_cause=disclose_cause
        )


class PreviousStepStatusError(SplitNamesWorkerError):
    """Raised when the previous step gave an error. The job should not have been created."""

    def __init__(self, message: str, cause: Optional[BaseException] = None):
        super().__init__(message, HTTPStatus.INTERNAL_SERVER_ERROR, "PreviousStepStatusError", cause, False)


class PreviousStepFormatError(SplitNamesWorkerError):
    """Raised when the content of the previous step has not the expected format."""

    def __init__(self, message: str, cause: Optional[BaseException] = None):
        super().__init__(message, HTTPStatus.INTERNAL_SERVER_ERROR, "PreviousStepFormatError", cause, False)


class SplitNameItem(TypedDict):
    dataset: str
    config: str
    split: str


class SplitNamesResponseContent(TypedDict):
    split_names: List[SplitNameItem]


def compute_split_names_response(
    dataset: str,
    config: str,
) -> SplitNamesResponseContent:
    """
    Get the response of /split-names for one specific dataset and config on huggingface.co.

    The /split-names response generated by this function does not include stats about the split, like the size or
    number of samples. See /dataset-info or /sizes for that.

    Args:
        dataset (`str`):
            A namespace (user or an organization) and a repo name separated
            by a `/`.
        config (`str`):
            A configuration name.
    Returns:
        `SplitNamesResponseContent`: An object with the list of split names for the dataset and config.
    <Tip>
    Raises the following errors:
        - [`~workers.split_names.PreviousStepStatusError`]
          If the the previous step gave an error.
        - [`~workers.split_names.PreviousStepFormatError`]
            If the content of the previous step has not the expected format
        - [`~libcommon.dataset.DatasetNotFoundError`]
            If previous step content was not found for the dataset
    </Tip>
    """
    logging.info(f"get split names for dataset={dataset}, config={config}")
    try:
        response = get_response(kind="/parquet-and-dataset-info", dataset=dataset)
    except DoesNotExist as e:
        raise DatasetNotFoundError("No response found in previous step for this dataset.", e) from e
    if response["http_status"] != HTTPStatus.OK:
        raise PreviousStepStatusError(
            f"Previous step gave an error: {response['http_status']}. This job should not have been created."
        )
    content = response["content"]

    if "dataset_info" not in content:
        raise PreviousStepFormatError("Previous step did not return the expected content.")
    dataset_info = content["dataset_info"]

    if config not in dataset_info:
        raise PreviousStepFormatError("Previous step did not return the expected content.")
    config_info = dataset_info[config]

    if "splits" not in config_info:
        raise PreviousStepFormatError("Previous step did not return the expected content.")

    split_name_items: List[SplitNameItem] = [
        {"dataset": dataset, "config": config, "split": str(split)} for split in config_info["splits"]
    ]

    return {"split_names": split_name_items}


class SplitNamesWorker(DatasetsBasedWorker):
    @staticmethod
    def get_job_type() -> str:
        return "/split-names"

    @staticmethod
    def get_version() -> str:
        return "1.0.0"

    def compute(self) -> Mapping[str, Any]:
        if self.config is None:
            raise ValueError("config is required")
        return compute_split_names_response(dataset=self.dataset, config=self.config)

    def get_new_splits(self, content: Mapping[str, Any]) -> set[SplitFullName]:
        """Get the set of new splits, from the content created by the compute."""
        return {
            SplitFullName(dataset=s["dataset"], config=s["config"], split=s["split"]) for s in content["split_names"]
        }
